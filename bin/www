#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var db = require('../modules/mongo_connection');
var http = require('http');
let server, port;

let mongoURL = "mongodb://localhost:27017";
let mongoUsername = process.env.MONGO_USER;
let mongoPassword = process.env.MONGO_PASS;
let dbName = process.env.MONGO_DB || 'CMPT218-ASS3';

if (mongoUsername && mongoPassword) {
  mongoURL = `mongodb://${mongoUsername}:${mongoPassword}@localhost:27017`;
}

console.log('dbName', dbName);
console.log('mongoUsername', mongoUsername);
console.log('mongoPassword', mongoPassword);
console.log('mongoUrl', mongoURL);

/**
 * Initialize MongoDB connection
 */
db.connect(mongoURL, dbName, err => {
  if (err) throw err;

  /**
   * Get port from environment and store in Express.
   */

  port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  console.log('Listening on ' + bind);
}